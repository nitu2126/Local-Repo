Git : 
    Version control system is a tool to track the changes(history) in code.
    It is popular 
    Open source 
    fast and scalable 
    helps in collaboration 

Github : https://github.com
    Website that allows developers to store and manage their code using git.
    Projects are uploaded in the form of folders. This folders are called as "Repositories". 
    
    1) Create profile.
    2) Create new repository.
    3) README file : Special file which includes all the related information of your project.
    Initial commit = first change
    Commit : Finalize change

    First ADD then Commit.
    We can add HTML syntax to make changes like adding text to new line.

GIT : Set up in laptop.
    Setting up git.
    Download : https://git-scm.com/downloads/win
    After installing check for the command : git --version which gives the version of the installed git. 
    ls and pwd command also works. 

Configuring git: 
    Telling GIT that in which account we are going to make changes from GIT to GITHUB.
    1) git config --global user.name "nitu2126"
        git config : congigure the git 
        --global : on global level 
                global : In complete system, it will change using the same email id.
                local : In specific repo, in specific project we are changing from different account. 
        user.name : Your name.

    2) git config --global user.email "nitishghadage2126@gmail.com"
        for setting email id
    3) git config --list
        to check what we have configured. 
    

Open gitbash : 
    ~ symbol: shows we are in root directory(main folder). 
    type above commands to configure git.

Basic git commands :
    clone : cloning the repository on your local machine. 
            ~ git clone <link>
            ex. git clone https://github.com/nitu2126/GitLearning-ApnaCollege.git

            All files from repo are cloned into local machine. 
           
            Use cd command to change directory.
            ex. ~ cd GitLearning-ApnaCollege

            To see all files in the directory use ls command.
            ~ ls 

            To see hidden files inside the directory, use ls -a command
            ~ ls -a 
            >> each folder that we are using to make changes have .git folder in them. 

    status : display the state of the code.
            ~ git status

            >> Up to date if no changes are done currently.

            If we modify the file in local machine and not on github, vs code will show "M" Symbol for modified.
            check again with git status

            First Add and then Commit.

            Status in git:
                untracked : new files that git doesn't yet track. New file , that git dont know.
                modified : You modified the file(changes done)
                unmodified : unchanged 
                staged : when we add files it goes into this mode. File added but not committed.
                commit : save changes confirm.

    add : add new or changed files in your working directory to the git staging area.
            ~ git add <file name>
               
               ex. ~ git add index.html (to add specific fie "index.html into staged area.)
               ex. ~ git add . 

    commit : it is a record of change.
            ~ git commit -m "some message"
                -m : for commit message 
                some mesage: meaningful message to know about changes we made.

                ex. ~ git commit -m "Add new paragraph & designation"

                check git status. 
                >> Your branch is ahead of 'origin/main' by 1 commit.
                means local system is ahead in commit, as this changes are not done on github.

    push : upload local repo content to remote repo
            ~ git push origin main 

            from local -------> remote (github)
            
            origin : Original repository name from which we copied into local machine.
                     name given to the repo. 
            main :   main branch in origin repo 

    init : used to create new git repository
           ~ git init

            on command line : 
            cd : to change directory 
            cd .. : to go backward in directory 
            mkdir : to make new directory (folder)

            If new file or folder is created in local machine check if its git repo or not using "ls -a" command.
            If it dont contain ".git" folder, use command "git init". 
            It will show "Initialized empty Git repository" and now check with "ls -a". 

            As we have created local git repository which is not on Github. To add on github we have to create new Repo on github and then push this files on that repo. 
            After creating new repo on github you will see some instructions as we have created new repo so we have to change its name to origin and branch name to main. 

            Before push we have to run following commands : 
            ~ git remote add origin <-link->
              
              git remote add : we are adding new github repo 
              origin : we have to give name 
              <-link-> : link of new repo.

            ~ git remote -v 
              
              to check what origin is set 
              i.e. to verify remote 
            
            ~ git branch 

              to check branch 
              branch : If multiple teams are working on one project , they works on copy of main project. Each individual copy is called branch.

            ~ git branch -M new_name

              to change name of branch 
              ex. to set new name as main : git branch -M main  

            ~ git push origin main / git push -u origin main 

              git push origin main : to upload local content on github 
              git push - u origin main : 
                -u flag : to set upstream. If we are going to work on this project for a long time, we can uuse this flag then we dont have to write origin main every time. 

Git Workflow : 
    1) Create Github repo
    2) Clone in local system 
    3) Make changes
    4) Add 
    5) Commit 
    6) Push 

Git Branches : 
    Copy of main branch 
    After commiting changes into each branch we finally merge them.
    To work on differnt features without depending on other person for changes to be done, we can use branches.

    Commands: 
            ~ git branch 
             to check the current branch we aare working 

            ~ git branch -M new_name 
             to change branch name 

            ~ git checkout <-another branch name->
             to go from one branch to another branch 
            
            ~ git checkout -b <-new branch name->
             to create new branch 
             check with git branch 
             green coloured is current branch 
            
            ~ git branch -d <-branch name to delete-> 
             to delete branch 

             if we are in the same branch that we want to delete, we get error.
             checkout from branch and then delete the branch. 

             When you are in another branch and making changes in the files, the changes are done on the copy of the files and not on the main branch. 

             Push this changes using command : git push origin feature1 as we have made changes in feature1 branch.

Merging code : 
    1) Through command line. 
        ~ git diff <-branch name->

         to compare branches, commits, files and more.
        
        ~ git merge <-branch name->
         to merge two branches.
    
    2) Create Pull Request. 
       using github.
       It lets you tell others about changes you've pushed to a branch in a repository on GitHub. 
       Decided and reviewed by main branch operator. 

Getting merged changes from GitHub into Local machine main repo : 
    Use Pull command : 
        ~ git pull origin main 
         to fetch and download content from a remote repo and immediately update the local repo to match that content.

Resolving Merge Conflicts : 
    If we are doing the changes on the same line on both branches conflict occurs and we have to select one of them.

    Using git merge command on local system to merge two branches. 

Undoing Changes : 
    Case 1 : Staged Changes (added but not committed)
             ~ git reset <-file name-> 
               to reset specific file 
             ~ git reset 
               to reset all files 

    Case 2 : Committed changes (for one commit)
             ~ git reset HEAD~1 
               reset the latest commit. 
               HEAD~1 means latest commit  

            ~ git log 
              to check all git commits
    
    Cse 3 : Committed changes (for multiple commits)
            ~ git reset <-commit hash->
              Hash of the commit that we want to go back. 

            ~ git reset --hard <-commit hash-> 
                ---hard : to make changes in the code editor also. 

Fork :  A new repository that shares the code and visibility settings with the original "upstream" repository. 
        Fork is a rough copy with same settings and same code. 